// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chunkServer.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ObjectInfo struct {
	Targets              []*Target `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty"`
	Name                 string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Hash                 string    `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ObjectInfo) Reset()         { *m = ObjectInfo{} }
func (m *ObjectInfo) String() string { return proto.CompactTextString(m) }
func (*ObjectInfo) ProtoMessage()    {}
func (*ObjectInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_dea6ac1b8088545f, []int{0}
}

func (m *ObjectInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObjectInfo.Unmarshal(m, b)
}
func (m *ObjectInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObjectInfo.Marshal(b, m, deterministic)
}
func (m *ObjectInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectInfo.Merge(m, src)
}
func (m *ObjectInfo) XXX_Size() int {
	return xxx_messageInfo_ObjectInfo.Size(m)
}
func (m *ObjectInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectInfo proto.InternalMessageInfo

func (m *ObjectInfo) GetTargets() []*Target {
	if m != nil {
		return m.Targets
	}
	return nil
}

func (m *ObjectInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ObjectInfo) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type PutRequest struct {
	// Types that are valid to be assigned to Data:
	//	*PutRequest_Info
	//	*PutRequest_Content
	Data                 isPutRequest_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PutRequest) Reset()         { *m = PutRequest{} }
func (m *PutRequest) String() string { return proto.CompactTextString(m) }
func (*PutRequest) ProtoMessage()    {}
func (*PutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dea6ac1b8088545f, []int{1}
}

func (m *PutRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PutRequest.Unmarshal(m, b)
}
func (m *PutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PutRequest.Marshal(b, m, deterministic)
}
func (m *PutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutRequest.Merge(m, src)
}
func (m *PutRequest) XXX_Size() int {
	return xxx_messageInfo_PutRequest.Size(m)
}
func (m *PutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PutRequest proto.InternalMessageInfo

type isPutRequest_Data interface {
	isPutRequest_Data()
}

type PutRequest_Info struct {
	Info *ObjectInfo `protobuf:"bytes,1,opt,name=info,proto3,oneof"`
}

type PutRequest_Content struct {
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3,oneof"`
}

func (*PutRequest_Info) isPutRequest_Data() {}

func (*PutRequest_Content) isPutRequest_Data() {}

func (m *PutRequest) GetData() isPutRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PutRequest) GetInfo() *ObjectInfo {
	if x, ok := m.GetData().(*PutRequest_Info); ok {
		return x.Info
	}
	return nil
}

func (m *PutRequest) GetContent() []byte {
	if x, ok := m.GetData().(*PutRequest_Content); ok {
		return x.Content
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PutRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PutRequest_Info)(nil),
		(*PutRequest_Content)(nil),
	}
}

type CopyObject struct {
	// Types that are valid to be assigned to Data:
	//	*CopyObject_Info
	//	*CopyObject_Content
	Data                 isCopyObject_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CopyObject) Reset()         { *m = CopyObject{} }
func (m *CopyObject) String() string { return proto.CompactTextString(m) }
func (*CopyObject) ProtoMessage()    {}
func (*CopyObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_dea6ac1b8088545f, []int{2}
}

func (m *CopyObject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CopyObject.Unmarshal(m, b)
}
func (m *CopyObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CopyObject.Marshal(b, m, deterministic)
}
func (m *CopyObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CopyObject.Merge(m, src)
}
func (m *CopyObject) XXX_Size() int {
	return xxx_messageInfo_CopyObject.Size(m)
}
func (m *CopyObject) XXX_DiscardUnknown() {
	xxx_messageInfo_CopyObject.DiscardUnknown(m)
}

var xxx_messageInfo_CopyObject proto.InternalMessageInfo

type isCopyObject_Data interface {
	isCopyObject_Data()
}

type CopyObject_Info struct {
	Info *ObjectInfo `protobuf:"bytes,1,opt,name=info,proto3,oneof"`
}

type CopyObject_Content struct {
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3,oneof"`
}

func (*CopyObject_Info) isCopyObject_Data() {}

func (*CopyObject_Content) isCopyObject_Data() {}

func (m *CopyObject) GetData() isCopyObject_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CopyObject) GetInfo() *ObjectInfo {
	if x, ok := m.GetData().(*CopyObject_Info); ok {
		return x.Info
	}
	return nil
}

func (m *CopyObject) GetContent() []byte {
	if x, ok := m.GetData().(*CopyObject_Content); ok {
		return x.Content
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CopyObject) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CopyObject_Info)(nil),
		(*CopyObject_Content)(nil),
	}
}

type PutResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	Code                 int32    `protobuf:"varint,2,opt,name=Code,proto3" json:"Code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PutResponse) Reset()         { *m = PutResponse{} }
func (m *PutResponse) String() string { return proto.CompactTextString(m) }
func (*PutResponse) ProtoMessage()    {}
func (*PutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dea6ac1b8088545f, []int{3}
}

func (m *PutResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PutResponse.Unmarshal(m, b)
}
func (m *PutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PutResponse.Marshal(b, m, deterministic)
}
func (m *PutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutResponse.Merge(m, src)
}
func (m *PutResponse) XXX_Size() int {
	return xxx_messageInfo_PutResponse.Size(m)
}
func (m *PutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PutResponse proto.InternalMessageInfo

func (m *PutResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PutResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type GetRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Dir                  string   `protobuf:"bytes,2,opt,name=dir,proto3" json:"dir,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dea6ac1b8088545f, []int{4}
}

func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRequest.Unmarshal(m, b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return xxx_messageInfo_GetRequest.Size(m)
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetRequest) GetDir() string {
	if m != nil {
		return m.Dir
	}
	return ""
}

type GetResponse struct {
	Content              []byte   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetResponse) Reset()         { *m = GetResponse{} }
func (m *GetResponse) String() string { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()    {}
func (*GetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dea6ac1b8088545f, []int{5}
}

func (m *GetResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetResponse.Unmarshal(m, b)
}
func (m *GetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetResponse.Marshal(b, m, deterministic)
}
func (m *GetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResponse.Merge(m, src)
}
func (m *GetResponse) XXX_Size() int {
	return xxx_messageInfo_GetResponse.Size(m)
}
func (m *GetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetResponse proto.InternalMessageInfo

func (m *GetResponse) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type TaskRequest struct {
	TaskType             int32    `protobuf:"varint,1,opt,name=taskType,proto3" json:"taskType,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskRequest) Reset()         { *m = TaskRequest{} }
func (m *TaskRequest) String() string { return proto.CompactTextString(m) }
func (*TaskRequest) ProtoMessage()    {}
func (*TaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dea6ac1b8088545f, []int{6}
}

func (m *TaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskRequest.Unmarshal(m, b)
}
func (m *TaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskRequest.Marshal(b, m, deterministic)
}
func (m *TaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskRequest.Merge(m, src)
}
func (m *TaskRequest) XXX_Size() int {
	return xxx_messageInfo_TaskRequest.Size(m)
}
func (m *TaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TaskRequest proto.InternalMessageInfo

func (m *TaskRequest) GetTaskType() int32 {
	if m != nil {
		return m.TaskType
	}
	return 0
}

func (m *TaskRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type TaskResponse struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskResponse) Reset()         { *m = TaskResponse{} }
func (m *TaskResponse) String() string { return proto.CompactTextString(m) }
func (*TaskResponse) ProtoMessage()    {}
func (*TaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dea6ac1b8088545f, []int{7}
}

func (m *TaskResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskResponse.Unmarshal(m, b)
}
func (m *TaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskResponse.Marshal(b, m, deterministic)
}
func (m *TaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskResponse.Merge(m, src)
}
func (m *TaskResponse) XXX_Size() int {
	return xxx_messageInfo_TaskResponse.Size(m)
}
func (m *TaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TaskResponse proto.InternalMessageInfo

func (m *TaskResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*ObjectInfo)(nil), "pb.ObjectInfo")
	proto.RegisterType((*PutRequest)(nil), "pb.PutRequest")
	proto.RegisterType((*CopyObject)(nil), "pb.CopyObject")
	proto.RegisterType((*PutResponse)(nil), "pb.PutResponse")
	proto.RegisterType((*GetRequest)(nil), "pb.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "pb.GetResponse")
	proto.RegisterType((*TaskRequest)(nil), "pb.TaskRequest")
	proto.RegisterType((*TaskResponse)(nil), "pb.TaskResponse")
}

func init() { proto.RegisterFile("chunkServer.proto", fileDescriptor_dea6ac1b8088545f) }

var fileDescriptor_dea6ac1b8088545f = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0xb1, 0x6e, 0xdb, 0x30,
	0x10, 0x15, 0x63, 0x59, 0xae, 0x4e, 0x42, 0xe3, 0x12, 0x45, 0x21, 0x68, 0x32, 0x88, 0xa0, 0xd5,
	0x24, 0xb8, 0xca, 0x98, 0xa1, 0x40, 0x3c, 0x24, 0x1d, 0x8a, 0x06, 0xac, 0xd1, 0x21, 0x1b, 0x25,
	0x33, 0xb1, 0xeb, 0x46, 0x54, 0x45, 0xca, 0x80, 0x3f, 0xb5, 0x7f, 0x53, 0x90, 0x14, 0x25, 0x7b,
	0xeb, 0x90, 0xed, 0xee, 0x11, 0xef, 0xdd, 0xbb, 0xc7, 0x83, 0x77, 0xd5, 0xb6, 0xab, 0xf7, 0x3f,
	0x78, 0x7b, 0xe0, 0x6d, 0xde, 0xb4, 0x42, 0x09, 0x7c, 0xd1, 0x94, 0xe9, 0xfc, 0x85, 0x2b, 0x76,
	0x8a, 0x92, 0x47, 0x80, 0xef, 0xe5, 0x2f, 0x5e, 0xa9, 0xaf, 0xf5, 0x93, 0xc0, 0x57, 0x30, 0x53,
	0xac, 0x7d, 0xe6, 0x4a, 0x26, 0x68, 0x31, 0xc9, 0xa2, 0x02, 0xf2, 0xa6, 0xcc, 0xd7, 0x06, 0xa2,
	0xee, 0x09, 0x63, 0xf0, 0x6b, 0xf6, 0xc2, 0x93, 0x8b, 0x05, 0xca, 0x42, 0x6a, 0x6a, 0x8d, 0x6d,
	0x99, 0xdc, 0x26, 0x13, 0x8b, 0xe9, 0x9a, 0xfc, 0x04, 0x78, 0xe8, 0x14, 0xe5, 0x7f, 0x3a, 0x2e,
	0x15, 0xbe, 0x02, 0x7f, 0x57, 0x3f, 0x89, 0x04, 0x2d, 0x50, 0x16, 0x15, 0x6f, 0xb5, 0xf0, 0x38,
	0xf9, 0xde, 0xa3, 0xe6, 0x15, 0xa7, 0x30, 0xab, 0x44, 0xad, 0x78, 0xad, 0x8c, 0x7c, 0x7c, 0xef,
	0x51, 0x07, 0xdc, 0x06, 0xe0, 0x6f, 0x98, 0x62, 0x5a, 0x77, 0x25, 0x9a, 0xa3, 0x65, 0xbf, 0xa2,
	0xee, 0x0d, 0x44, 0xc6, 0xaf, 0x6c, 0x44, 0x2d, 0x39, 0x4e, 0x60, 0xf6, 0x8d, 0x4b, 0xc9, 0x9e,
	0xb9, 0xd1, 0x0e, 0xa9, 0x6b, 0xf5, 0xb2, 0x2b, 0xb1, 0xb1, 0x01, 0x4c, 0xa9, 0xa9, 0x49, 0x01,
	0x70, 0xc7, 0x87, 0x65, 0x5d, 0x44, 0xe8, 0x24, 0xa2, 0x39, 0x4c, 0x36, 0xbb, 0xb6, 0x4f, 0x4d,
	0x97, 0xe4, 0x13, 0x44, 0x86, 0x33, 0x0e, 0x74, 0x1e, 0x35, 0x2f, 0x1e, 0x1c, 0x92, 0x2f, 0x10,
	0xad, 0x99, 0xdc, 0x3b, 0xf5, 0x14, 0xde, 0x28, 0x26, 0xf7, 0xeb, 0x63, 0x63, 0x27, 0x4c, 0xe9,
	0xd0, 0xe3, 0xf7, 0x30, 0x3d, 0xb0, 0xdf, 0x9d, 0x35, 0x17, 0x53, 0xdb, 0x90, 0x8f, 0x10, 0x5b,
	0x81, 0x7e, 0xd4, 0x07, 0x08, 0xa4, 0x62, 0xaa, 0x93, 0x3d, 0xbf, 0xef, 0x8a, 0xbf, 0x08, 0xa2,
	0xd5, 0x78, 0x3a, 0x78, 0x09, 0xe1, 0x43, 0xa7, 0xfa, 0xa4, 0x4d, 0xb6, 0xe3, 0x8f, 0xa6, 0x97,
	0x43, 0x6f, 0x55, 0x89, 0x97, 0x21, 0xfc, 0xf9, 0xec, 0x73, 0xfe, 0x8b, 0xb2, 0x84, 0xf0, 0x8e,
	0x9f, 0x0d, 0x19, 0x93, 0xb4, 0x8c, 0x93, 0x94, 0x88, 0xb7, 0x44, 0xf8, 0xda, 0xad, 0x53, 0xf1,
	0x9d, 0xb6, 0x79, 0x69, 0xcf, 0x74, 0x48, 0x28, 0x9d, 0x8f, 0x80, 0xa3, 0xdd, 0x06, 0x8f, 0x7e,
	0x7e, 0xd3, 0x94, 0x65, 0x60, 0x2e, 0xff, 0xfa, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe8, 0xd3,
	0x74, 0x42, 0x24, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChunkServerClient is the client API for ChunkServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChunkServerClient interface {
	PutObject(ctx context.Context, opts ...grpc.CallOption) (ChunkServer_PutObjectClient, error)
	CopyObject(ctx context.Context, opts ...grpc.CallOption) (ChunkServer_CopyObjectClient, error)
	GetObject(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (ChunkServer_GetObjectClient, error)
	TaskReceiver(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
}

type chunkServerClient struct {
	cc *grpc.ClientConn
}

func NewChunkServerClient(cc *grpc.ClientConn) ChunkServerClient {
	return &chunkServerClient{cc}
}

func (c *chunkServerClient) PutObject(ctx context.Context, opts ...grpc.CallOption) (ChunkServer_PutObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChunkServer_serviceDesc.Streams[0], "/pb.ChunkServer/PutObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &chunkServerPutObjectClient{stream}
	return x, nil
}

type ChunkServer_PutObjectClient interface {
	Send(*PutRequest) error
	CloseAndRecv() (*PutResponse, error)
	grpc.ClientStream
}

type chunkServerPutObjectClient struct {
	grpc.ClientStream
}

func (x *chunkServerPutObjectClient) Send(m *PutRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chunkServerPutObjectClient) CloseAndRecv() (*PutResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PutResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chunkServerClient) CopyObject(ctx context.Context, opts ...grpc.CallOption) (ChunkServer_CopyObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChunkServer_serviceDesc.Streams[1], "/pb.ChunkServer/CopyObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &chunkServerCopyObjectClient{stream}
	return x, nil
}

type ChunkServer_CopyObjectClient interface {
	Send(*PutRequest) error
	CloseAndRecv() (*PutResponse, error)
	grpc.ClientStream
}

type chunkServerCopyObjectClient struct {
	grpc.ClientStream
}

func (x *chunkServerCopyObjectClient) Send(m *PutRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chunkServerCopyObjectClient) CloseAndRecv() (*PutResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PutResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chunkServerClient) GetObject(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (ChunkServer_GetObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChunkServer_serviceDesc.Streams[2], "/pb.ChunkServer/GetObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &chunkServerGetObjectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChunkServer_GetObjectClient interface {
	Recv() (*GetResponse, error)
	grpc.ClientStream
}

type chunkServerGetObjectClient struct {
	grpc.ClientStream
}

func (x *chunkServerGetObjectClient) Recv() (*GetResponse, error) {
	m := new(GetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chunkServerClient) TaskReceiver(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, "/pb.ChunkServer/TaskReceiver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChunkServerServer is the server API for ChunkServer service.
type ChunkServerServer interface {
	PutObject(ChunkServer_PutObjectServer) error
	CopyObject(ChunkServer_CopyObjectServer) error
	GetObject(*GetRequest, ChunkServer_GetObjectServer) error
	TaskReceiver(context.Context, *TaskRequest) (*TaskResponse, error)
}

// UnimplementedChunkServerServer can be embedded to have forward compatible implementations.
type UnimplementedChunkServerServer struct {
}

func (*UnimplementedChunkServerServer) PutObject(srv ChunkServer_PutObjectServer) error {
	return status.Errorf(codes.Unimplemented, "method PutObject not implemented")
}
func (*UnimplementedChunkServerServer) CopyObject(srv ChunkServer_CopyObjectServer) error {
	return status.Errorf(codes.Unimplemented, "method CopyObject not implemented")
}
func (*UnimplementedChunkServerServer) GetObject(req *GetRequest, srv ChunkServer_GetObjectServer) error {
	return status.Errorf(codes.Unimplemented, "method GetObject not implemented")
}
func (*UnimplementedChunkServerServer) TaskReceiver(ctx context.Context, req *TaskRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskReceiver not implemented")
}

func RegisterChunkServerServer(s *grpc.Server, srv ChunkServerServer) {
	s.RegisterService(&_ChunkServer_serviceDesc, srv)
}

func _ChunkServer_PutObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChunkServerServer).PutObject(&chunkServerPutObjectServer{stream})
}

type ChunkServer_PutObjectServer interface {
	SendAndClose(*PutResponse) error
	Recv() (*PutRequest, error)
	grpc.ServerStream
}

type chunkServerPutObjectServer struct {
	grpc.ServerStream
}

func (x *chunkServerPutObjectServer) SendAndClose(m *PutResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chunkServerPutObjectServer) Recv() (*PutRequest, error) {
	m := new(PutRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChunkServer_CopyObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChunkServerServer).CopyObject(&chunkServerCopyObjectServer{stream})
}

type ChunkServer_CopyObjectServer interface {
	SendAndClose(*PutResponse) error
	Recv() (*PutRequest, error)
	grpc.ServerStream
}

type chunkServerCopyObjectServer struct {
	grpc.ServerStream
}

func (x *chunkServerCopyObjectServer) SendAndClose(m *PutResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chunkServerCopyObjectServer) Recv() (*PutRequest, error) {
	m := new(PutRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChunkServer_GetObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChunkServerServer).GetObject(m, &chunkServerGetObjectServer{stream})
}

type ChunkServer_GetObjectServer interface {
	Send(*GetResponse) error
	grpc.ServerStream
}

type chunkServerGetObjectServer struct {
	grpc.ServerStream
}

func (x *chunkServerGetObjectServer) Send(m *GetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ChunkServer_TaskReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServerServer).TaskReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChunkServer/TaskReceiver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServerServer).TaskReceiver(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChunkServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ChunkServer",
	HandlerType: (*ChunkServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TaskReceiver",
			Handler:    _ChunkServer_TaskReceiver_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PutObject",
			Handler:       _ChunkServer_PutObject_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "CopyObject",
			Handler:       _ChunkServer_CopyObject_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetObject",
			Handler:       _ChunkServer_GetObject_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chunkServer.proto",
}
